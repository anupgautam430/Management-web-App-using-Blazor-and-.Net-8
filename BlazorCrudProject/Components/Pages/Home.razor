@page "/"

<PageTitle>Home</PageTitle>

<h2 class="text-center">
    Employee Management System
</h2>

@using System.Threading
@using BlazorCrudProject.DataAccess.Services
@using BlazorCrudProject.DataAccess.ViewModels
@using BlazorCrudProject.Enum
@using ClosedXML.Excel

@inject EmployeeService employeeService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JS

@rendermode InteractiveServer


<MudDataGrid @ref="dataGridRef" T="EmployeeViewModel" MultiSelection="true" Items="@Elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked">
    <ToolBarContent>
         <MudText Typo="Typo.h6">Employee Details</MudText>
         <MudFileUpload Class="me-2" T="IBrowserFile" @ref="excelUpload" Filterable="false">
             <ActivatorContent>
                 <MudButton Disabled="@importing" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Custom.FileFormats.FileExcel">
                    @if (importing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indetermine="true"></MudProgressCircular>
                        <MudText Class="ms-2">Processing..</MudText>
                    }
                    else
                    {
                        <MudText>Import Excel</MudText>
                    }
                </MudButton>
             </ActivatorContent>
         </MudFileUpload>

        <MudButton Disabled="@exporting" @onclick="ExportToExcel" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Custom.FileFormats.FileExcel">
            @if (exporting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indetermine="true"></MudProgressCircular>
                <MudText Class="ms-2">Processing..</MudText>
            }
            else
            {
                <MudText>Export Excel</MudText>
            }
        </MudButton>

        <MudSpacer />
         <MudButton Typo="Typo.h6" Class="me-2"
                   @onclick="CreateNewUser"
                   StartIcon="@Icons.Material.Filled.PersonAddAlt1"
                   Variant="Variant.Filled"
                   Color="Color.Primary">
            Add New Employee
        </MudButton> 

         <MudSpacer />
         <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="EmployeeViewModel" />
        <PropertyColumn Property="x => x.EmployeeId" Title="Employee Id" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x => x.FullName" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.Department" />
        <PropertyColumn Property="x => x.DateOfBirth" />
        <PropertyColumn Property="x => x.Age" Title="Age" />
        <PropertyColumn Property="x => x.PhoneNumber" Title="PhoneNumber" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudButton Class="me-2"
                    Size="@Size.Small"
                    Variant="Variant.Filled"
                    StartIcon="@Icons.Material.Filled.Edit"
                    Color="@Color.Warning"
                    OnClick="@(()=> this.UpdateEmployee(context))">
                    Update
                    </MudButton>

                <MudButton Class="me-2"
                           Size="@Size.Small"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Edit"
                           Color="@Color.Error"
                           OnClick="@(()=> this.RemoveEmployee(context))">
                    Remove
                </MudButton>

                </CellTemplate>
            </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="EmployeeViewModel" />
    </PagerContent>
</MudDataGrid>

@code {

    private MudDataGrid<EmployeeViewModel> dataGridRef;
    MudFileUpload<IBrowserFile> excelUpload;

    bool importing = false;
    bool exporting = false;

    private IEnumerable<EmployeeViewModel> Elements = new List<EmployeeViewModel>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    private Func<EmployeeViewModel, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.FullName.Length;
        else
            return x.FullName;
    };
    private Func<EmployeeViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.FullName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Department.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = await employeeService.GetAllEmployee();
    }


    void RowClicked(DataGridRowClickEventArgs<EmployeeViewModel> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<EmployeeViewModel> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    public async Task CreateNewUser()
    {
        try
        {
            var option = new DialogOptions { MaxWidth = MaxWidth.Large };

            var parameters = new DialogParameters<CreateUpdateEmployee>
            {
                {x=> x.Action, UiActionEnum.Insert },
                {x=> x.model, new EmployeeViewModel() }
            };


            var dialog = await DialogService.ShowAsync<CreateUpdateEmployee>("Add Employee",parameters, option);
            var result = await dialog.Result;

            if (result is not null && !result.Canceled)
            {
                if (dataGridRef != null)
                    await dataGridRef.ReloadServerData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task UpdateEmployee(CellContext<EmployeeViewModel> employee)
    {

        var employeeView = employeeService.FindEmployee(employee.Item.EmployeeId);
        if(employeeView is null)
        {
            Snackbar.Add("Something wrong when try to find the employee!", Severity.Error);
            return;
        }

        var option = new DialogOptions { MaxWidth = MaxWidth.Large };

        var parameters = new DialogParameters<CreateUpdateEmployee>
            {
                {x=> x.Action, UiActionEnum.Update },
                {x=> x.model, employeeView },
                {x => x._date , employeeView.DateOfBirth }
            };


        var dialog = await DialogService.ShowAsync<CreateUpdateEmployee>("Update Employee", parameters, option);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            if (dataGridRef != null)
                await dataGridRef.ReloadServerData();
        }

    } 

    private async Task RemoveEmployee(CellContext<EmployeeViewModel> employee)
    {
        var dialog = await DialogService.ShowAsync<RemoveConformationDialog>("Remove: " + employee.Item.FullName);
        var result = await dialog.Result;

        if(result is not null && !result.Canceled)
        {
            var confirmed = (bool)(result.Data ?? false);
            if (confirmed)
            {
                var deleteResult = employeeService.DeleteEmployee(employee.Item.EmployeeId);
                if (deleteResult)
                {
                    Snackbar.Add("successfully removed the employee!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Failed to removed the employee!", Severity.Error);

                }
            }
        }
    }

    private async Task UploadFile(IBrowserFile file)
    {
        if (file is null) return;
        importing = true;
        try
        {
            using var stream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(stream);

            stream.Position = 0;

            using var workbook = new XLWorkbook(stream);
            var worksheet = workbook.Worksheets.First();

            var rows = worksheet.RowsUsed().Skip(1);

            List<EmployeeViewModel> employees = new List<EmployeeViewModel>();
            foreach(var row in rows)
            {
                EmployeeViewModel employeeViewModel = new EmployeeViewModel
                    {
                        FullName = row.Cell(1).Value.ToString(),
                        Department = row.Cell(2).Value.ToString(),
                        DateOfBirth = row.Cell(3).Value,
                        Age = int.Parse(row.Cell(4).Value.ToString()),
                        PhoneNumber = int.Parse(row.Cell(5).Value.ToString()),
                    };
                employees.Add(employeeViewModel);
            }

            var parameters = new DialogParameters<ImportDialog>
            {
                { x=> x.employees, employees}
            };
            var options = new DialogOptions() {MaxWidth = MaxWidth.Large};

            var dialog = await DialogService.ShowAsync<ImportDialog>("Ready to Import", parameters, options);
            var result = await dialog.Result;

            if (result is not null && !result.Canceled)
            {
                if (dataGridRef != null)
                    await dataGridRef.ReloadServerData();
            }
        }
        catch(Exception ex)
        {
        }
        await excelUpload.ClearAsync();
        importing = false;
    }

    private async Task ExportToExcel()
    {
        exporting = true;
        var excelBytes = await employeeService.ExportToExcel();
        await JS.InvokeVoidAsync("downloadFileFromBytes", "List employee.xlsx", excelBytes);
        exporting = false;
    }

}